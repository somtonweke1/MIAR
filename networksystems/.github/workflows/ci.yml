name: CI/CD Pipeline

on:
  push:
    branches: [main, master, develop]
  pull_request:
    branches: [main, master, develop]

env:
  NODE_VERSION: '20.x'
  CACHE_KEY: node-modules-${{ hashFiles('**/package-lock.json') }}

jobs:
  # Code Quality Checks
  lint-and-typecheck:
    name: Lint & Type Check
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run ESLint
        run: npm run lint

      - name: Run TypeScript type check
        run: npx tsc --noEmit

      - name: Check formatting (Prettier)
        run: npx prettier --check "src/**/*.{ts,tsx,js,jsx,json,css,md}"
        continue-on-error: true

  # Unit and Integration Tests
  test:
    name: Unit & Integration Tests
    runs-on: ubuntu-latest
    timeout-minutes: 15

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Setup Prisma
        run: npx prisma generate

      - name: Run unit tests
        run: npm run test -- --coverage --maxWorkers=2

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: ./coverage/coverage-final.json
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false

      - name: Archive coverage report
        uses: actions/upload-artifact@v3
        with:
          name: coverage-report
          path: coverage/
          retention-days: 7

  # End-to-End Tests
  e2e:
    name: E2E Tests
    runs-on: ubuntu-latest
    timeout-minutes: 20

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Install Playwright browsers
        run: npx playwright install --with-deps chromium

      - name: Setup database
        run: |
          npx prisma generate
          npx prisma migrate deploy
        env:
          DATABASE_URL: file:./test.db

      - name: Build application
        run: npm run build
        env:
          SKIP_ENV_VALIDATION: true

      - name: Run E2E tests
        run: npm run test:e2e
        env:
          DATABASE_URL: file:./test.db

      - name: Upload Playwright report
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: playwright-report
          path: playwright-report/
          retention-days: 7

  # Security Scanning
  security:
    name: Security Scanning
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run npm audit
        run: npm audit --audit-level=moderate
        continue-on-error: true

      - name: Run Snyk security scan
        uses: snyk/actions/node@master
        continue-on-error: true
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=high

      - name: OWASP Dependency Check
        uses: dependency-check/Dependency-Check_Action@main
        continue-on-error: true
        with:
          project: 'miar-platform'
          path: '.'
          format: 'HTML'
          args: >
            --enableRetired
            --enableExperimental

      - name: Upload OWASP report
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: owasp-report
          path: reports/
          retention-days: 7

  # Build Application
  build:
    name: Build Application
    runs-on: ubuntu-latest
    needs: [lint-and-typecheck, test]
    timeout-minutes: 15

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Setup Prisma
        run: npx prisma generate

      - name: Build application
        run: npm run build
        env:
          SKIP_ENV_VALIDATION: true

      - name: Archive build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: build-artifacts
          path: |
            .next/
            public/
          retention-days: 7

      - name: Check bundle size
        run: |
          echo "Checking bundle sizes..."
          du -sh .next/static/chunks/* | sort -h | tail -10
        continue-on-error: true

  # Bundle Analysis
  analyze-bundle:
    name: Analyze Bundle Size
    runs-on: ubuntu-latest
    needs: [build]
    if: github.event_name == 'pull_request'
    timeout-minutes: 10

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Setup Prisma
        run: npx prisma generate

      - name: Analyze bundle
        run: ANALYZE=true npm run build
        env:
          SKIP_ENV_VALIDATION: true

      - name: Comment bundle size on PR
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');
            const comment = `### Bundle Analysis

            Bundle build completed! Check the artifacts for detailed analysis.

            📦 Build artifacts are available in the workflow run.`;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });

  # Database Migrations Check
  migration-check:
    name: Database Migrations Check
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Check Prisma schema
        run: npx prisma format --check

      - name: Validate migrations
        run: npx prisma migrate diff --from-schema-datamodel prisma/schema.prisma --to-schema-datamodel prisma/schema.prisma --script
        continue-on-error: true

      - name: Generate Prisma client
        run: npx prisma generate

  # Deploy to Staging (on push to develop)
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [lint-and-typecheck, test, build, security]
    if: github.ref == 'refs/heads/develop' && github.event_name == 'push'
    environment:
      name: staging
      url: https://staging.miar-platform.com
    timeout-minutes: 15

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to Vercel (Staging)
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          vercel-args: '--prod'
          scope: ${{ secrets.VERCEL_ORG_ID }}

      - name: Run database migrations (staging)
        run: |
          echo "Running migrations on staging..."
          # Migrations would be run via Prisma in production
        env:
          DATABASE_URL: ${{ secrets.STAGING_DATABASE_URL }}

      - name: Notify deployment status
        if: always()
        run: |
          echo "Staging deployment completed"
          # Add Slack/Discord notification here if needed

  # Deploy to Production (on push to main/master)
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [lint-and-typecheck, test, e2e, build, security]
    if: (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master') && github.event_name == 'push'
    environment:
      name: production
      url: https://miar-platform.com
    timeout-minutes: 20

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to Vercel (Production)
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          vercel-args: '--prod'
          scope: ${{ secrets.VERCEL_ORG_ID }}

      - name: Run database migrations (production)
        run: |
          echo "Running migrations on production..."
          # Migrations would be run via Prisma in production
        env:
          DATABASE_URL: ${{ secrets.PRODUCTION_DATABASE_URL }}

      - name: Create deployment tag
        run: |
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
          TAG="v$(date +'%Y%m%d-%H%M%S')"
          git tag -a "$TAG" -m "Production deployment $TAG"
          git push origin "$TAG"
        continue-on-error: true

      - name: Notify deployment success
        if: success()
        run: |
          echo "✅ Production deployment successful!"
          # Add Slack/Discord notification here

      - name: Notify deployment failure
        if: failure()
        run: |
          echo "❌ Production deployment failed!"
          # Add Slack/Discord notification here

  # Lighthouse Performance Check
  lighthouse:
    name: Lighthouse Performance
    runs-on: ubuntu-latest
    needs: [deploy-staging]
    if: github.ref == 'refs/heads/develop' && github.event_name == 'push'
    timeout-minutes: 10

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Wait for deployment
        run: sleep 60

      - name: Run Lighthouse CI
        uses: treosh/lighthouse-ci-action@v10
        with:
          urls: |
            https://staging.miar-platform.com
            https://staging.miar-platform.com/dashboard
          uploadArtifacts: true
          temporaryPublicStorage: true

      - name: Check Lighthouse scores
        run: |
          echo "Lighthouse scores available in artifacts"
